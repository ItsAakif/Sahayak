import jsPDF from 'jspdf';
import { logError } from './errorHandler';

// Enhanced PDF generation with better error handling
export const generatePDF = (content, options = {}) => {
  try {
    const {
      filename = 'sahayak-content',
      title = 'Sahayak - AI Generated Content',
      fontSize = 10,
      lineHeight = 6,
      maxWidth = 170,
      margin = 20
    } = options;

    const pdf = new jsPDF();
    
    // Set font for better Unicode support
    pdf.setFont('helvetica');
    
    // Title
    pdf.setFontSize(16);
    pdf.text(title, margin, margin);
    
    // Clean markdown content for PDF
    const cleanContent = cleanMarkdownForPDF(content);
    
    let yPosition = margin + 20;
    const pageHeight = pdf.internal.pageSize.height;
    
    pdf.setFontSize(fontSize);
    
    cleanContent.forEach(line => {
      if (yPosition > pageHeight - margin) {
        pdf.addPage();
        yPosition = margin;
      }
      
      const trimmedLine = line.trim();
      if (trimmedLine) {
        // Split long lines to fit page width
        const wrappedLines = wrapText(pdf, trimmedLine, maxWidth);
        
        wrappedLines.forEach(wrappedLine => {
          if (yPosition > pageHeight - margin) {
            pdf.addPage();
            yPosition = margin;
          }
          
          pdf.text(wrappedLine, margin, yPosition);
          yPosition += lineHeight;
        });
      }
      
      yPosition += 2; // Extra spacing between paragraphs
    });
    
    // Footer with page numbers
    const pageCount = pdf.internal.getNumberOfPages();
    for (let i = 1; i <= pageCount; i++) {
      pdf.setPage(i);
      pdf.setFontSize(8);
      pdf.text(
        `Generated by Sahayak AI - Page ${i} of ${pageCount}`, 
        margin, 
        pageHeight - 10
      );
      pdf.text(
        new Date().toLocaleDateString(), 
        pageHeight - margin - 30, 
        pageHeight - 10
      );
    }
    
    // Save the PDF
    pdf.save(`${filename}.pdf`);
    
    return {
      success: true,
      message: 'PDF generated successfully'
    };
    
  } catch (error) {
    logError(error, { context: 'generatePDF', content: content?.substring(0, 100) });
    throw new Error('Failed to generate PDF. Please try again.');
  }
};

// Clean markdown content for PDF rendering
const cleanMarkdownForPDF = (content) => {
  if (!content || typeof content !== 'string') {
    return ['No content available'];
  }

  return content
    .replace(/#{1,6}\s/g, '') // Remove markdown headers
    .replace(/\*\*(.*?)\*\*/g, '$1') // Remove bold markdown
    .replace(/\*(.*?)\*/g, '$1') // Remove italic markdown
    .replace(/\[(.*?)\]\(.*?\)/g, '$1') // Remove links
    .replace(/```[\s\S]*?```/g, '') // Remove code blocks
    .replace(/`(.*?)`/g, '$1') // Remove inline code
    .replace(/[üìùüü¢üü°üî¥üéØüìöüí°üåüüß†üå±üî¨üìçüåæüéìüé®üìè]/g, '') // Remove emojis
    .split('\n')
    .filter(line => line.trim() !== '' && !line.includes('---'));
};

// Wrap text to fit within specified width
const wrapText = (pdf, text, maxWidth) => {
  const words = text.split(' ');
  const lines = [];
  let currentLine = '';
  
  words.forEach(word => {
    const testLine = currentLine + (currentLine ? ' ' : '') + word;
    const textWidth = pdf.getTextWidth(testLine);
    
    if (textWidth > maxWidth && currentLine) {
      lines.push(currentLine);
      currentLine = word;
    } else {
      currentLine = testLine;
    }
  });
  
  if (currentLine) {
    lines.push(currentLine);
  }
  
  return lines.length > 0 ? lines : [text];
};

// Generate PDF with custom styling for different content types
export const generateStyledPDF = (content, contentType, options = {}) => {
  const styleOptions = {
    content: {
      title: 'Educational Story',
      fontSize: 11,
      lineHeight: 7
    },
    worksheet: {
      title: 'Practice Worksheet',
      fontSize: 10,
      lineHeight: 6
    },
    knowledge: {
      title: 'Q&A Response',
      fontSize: 10,
      lineHeight: 6
    },
    visual: {
      title: 'Drawing Instructions',
      fontSize: 9,
      lineHeight: 5
    },
    audio: {
      title: 'Audio Transcript',
      fontSize: 10,
      lineHeight: 6
    },
    camera: {
      title: 'Visual Analysis',
      fontSize: 10,
      lineHeight: 6
    }
  };

  const style = styleOptions[contentType] || styleOptions.content;
  const mergedOptions = { ...style, ...options };

  return generatePDF(content, mergedOptions);
};

export default {
  generatePDF,
  generateStyledPDF
};